# -*- coding: utf-8 -*-
"""Введение в программирование переменные, условные конструкции 08.11.20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iyRu9X4Q7QGcmezyP7I6CrdNhF5NN9cp

#                     Первые шаги в программировании на Python

Почему именно питон?

- Когда Excel не справляется с поставленными задачами из-за их сложности или из-за объема данных

- Можно делать в одной среде целый ряд операций от начала и до конца используя Python:  скачать данные, подготовить их, проанализировать, визуализировать, развернуть в виде веб-приложения. 

- На этом языке можно работать с файловой системой, автоматизировать различные процессы и сокращать количество работы руками 

- Очень популярный язык. На все ваши вопросы скорее всего есть ответы


Основной минус языка - он довольно медленный по сравнинию с другими (но есть способы его значительно ускорить)

![alt text](https://hsto.org/webt/aj/c7/sl/ajc7slei_e9bazk4jvgmnfntlra.png)

Источник: https://habr.com/ru/post/436626/

Вот лишь некоторые вещи, которые умеет делать python:

    Работа с xml/html файлами
    Работа с http запросами
    GUI (графический интерфейс)
    Создание веб-сценариев
    Работа с FTP
    Работа с изображениями, аудио и видео файлами
    Робототехника
    Программирование математических и научных вычислений

Мы используем ресурс Google Collab для того, чтобы сделать ваши первые шаги в языке Пайтон более приятными и доступными.

Вообще, в рамках курса мы работаем с кодом локально, т.е устанавливая все необходимые программы на компьютер. Это обязательно нужно будет сделать, если вы хотите успешной пройти курс и освоить программирование. Однако скачивание и установка необходимого ПО может занять время и силы. Поэтому тем, кто этого ещё не сделал, я предлагаю воспользоваться этим сервисом для того, чтобы в начале сосредоточиться на изучении языка, а не на решении смежных вопросов.

В правом верхнем углу страницы вы можете найти кнопку + Code Используйте её для создания новой ячейки. Вводите или копируйте код, который мы разбираем на вебинаре и нажимайте на кнопку запуска слева.

#### Напишем нашу первую программу - выведем строку на экран
"""

print('Hello World!')

print(Привет)

"""Воспользуемся языком как калькулятором"""

10+1
10-1

print(34*2)
print(68-2)

6 / 2

"""Вещественные числа так же называются числами с плавающей **точкой**. Так что Python не примет запятую в дробном числе, нужно использовать точку."""

8.6 / 2 
# 8,6 /2 # как видите, получилось не то что мы хотели

(5+30)**2

"""Запомните, что умножение и деление всегда выполняются прежде, чем сложение и вычитание, если не менять порядок вычислений с помощью скобок."""

5//2

"""Операторы в Python

Питон может складывать, вычитать, умножать, делить, возводить в степень числа. И это не полный список того, что он может, просто эти действия самые простые, поэтому давайте разберемся, как их выполнять

<table class="src" border="1">
<tbody>
<tr style="background-color: #2b5b84;"><th style="width: 10%;"><span style="color: #ffff00;">Оператор</span></th><th style="width: 45%;"><span style="color: #ffff00;">Описание</span></th><th><span style="color: #ffff00;">Примеры</span></th></tr>
<tr>
<td style="background-color: #2b5b84; text-align: center;"><strong><span style="color: #ffff00;">+</span></strong></td>
<td>Сложение - Суммирует значения слева и справа от оператора</td>
<td>
<p>15 + 5 в результате будет 20<br> 20 + -3 в результате будет 17<br> 13.4 + 7 в результате будет 20.4</p>
</td>
</tr>
<tr>
<td style="background-color: #2b5b84; text-align: center;"><strong><span style="color: #ffff00;">-</span></strong></td>
<td>Вычитание - Вычитает правый операнд из левого</td>
<td>15 - 5 в результате будет 10<br> 20 - -3 в результате будет 23<br> 13.4 - 7 в результате будет 6.4</td>
</tr>
<tr>
<td style="background-color: #2b5b84; text-align: center;"><strong><span style="color: #ffff00;">*</span></strong></td>
<td>Умножение - Перемножает операнды</td>
<td>5 * 5 в результате будет 25<br>7 * 3.2 в результате будет 22.4<br>-3 * 12 в результате будет -36</td>
</tr>
<tr>
<td style="background-color: #2b5b84; text-align: center;"><strong><span style="color: #ffff00;">/</span></strong></td>
<td>Деление - Делит левый операнд на правый</td>
<td>15 / 5 в результате будет 3<br>5 / 2 в результате будет 2 (В Python 2.x версии при делении двух целых чисел результат будет целое число)<br> 5.0 / 2 в результате будет 2.5 (Чтобы получить "правильный" результат хотя бы один операнд должен быть float)</td>
<tr>
<td style="background-color: #2b5b84; text-align: center;"><strong><span style="color: #ffff00;">**</span></strong></td>
<td>Возведение в степень - возводит левый операнд в степень правого</td>
<td>5 ** 2 в результате будет 25<br>2 ** 3 в результате будет 8<br>-3 ** 2 в результате будет -9</td>
</tr>
</tr>
<tr>
<td style="background-color: #2b5b84; text-align: center;"><strong><span style="color: #ffff00;">%</span></strong></td>
<td>Деление по модулю - Делит левый операнд на правый и возвращает остаток.</td>
<td>6 % 2 в результате будет 0<br>7 % 2 в результате будет 1<br>13.2 % 5 в результате 3.2</td>
</tr>
<tr>
<td style="background-color: #2b5b84; text-align: center;"><strong><span style="color: #ffff00;">//</span></strong></td>
<td>Целочисленное деление - Деление в котором возвращается только целая часть результата. Часть после запятой отбрасывается.</td>
<td>12 // 5 в результате будет 2<br>4 // 3 в результате будет 1<br>25 // 6 в результате будет 4</td>
</tr>
</tbody>
</table>

Задача: 

В коробке 10 шариков весом 1 кг, 3 шарика весом 2 кг, и 2 шарика весом 4 кг. Сама коробка весит 0.1 кг. Посчитайте, сколько весят все шарики вместе с коробкой.

Маленькая задача

Напишите код для нахождения квадратного корня из произведения чисел 5, 5.6, 5-1

### Переменные
"""

hello = 'Привет, мир!'
hello

"""В программировании слово переменная обозначает именованное место для  хранения  данных,  например  чисел,  текста,  списков  с  числами  или  символами и так далее. Также переменную можно рассматривать как ярлык, которым помечены некие данные.

Например, на нашем складе лежит 500 пар кроссовок Nike. Давайте как-то зафиксируем эту информацию!
"""

nikes = 500

"""Чтобы создать переменную с именем **nikes**, нужно указать имя, поставить знак «равно» (=) и ввести соответствующие данные. Давайте создадим переменную nikes, указав, что ей соответствует значение 500 (однако из этого не следует, что другая переменная не может иметь такое же значение):"""

найки = 500

"""Можно изменить значение переменной `nikes` —  сделать так, чтобы ей соответствовали другие данные. Например, вот как заменить значение `nikes` числом 450"""

nikes = 450
print(nikes)

print(hi)

"""### Немного об именах переменных

Для создания корректных имен перемен­ных надо следовать всего нескольким правилам; о некорректном имени Python вам сообщит, выведя ошибку

Есть несколько правил при определении переменных:

            имена переменных не должны повторять уже встроенные в Python имена, например, print, str, in и т.д.;
            имена переменных могут содержать только буквы, цифры и нижнее подчёркивание; 
            имена переменных не должны начинаться с цифры;
            очень желательно, чтобы имена переменных выражали суть переменной и не были слишком длинными.

Если компьютер принял переменную это не значит, что это имя хорошее! 
Переменная с именем **aklkjkll112312** будет понятна компьютеру, но ну будет понятна человеку. Поэтом при создании переменных вы должны ориентироваться на своего читателя. Порой вы будете единственным читателем вашего кода, но поверьте(!), вернувшись через месяц для того, чтобы немного изменить свою программу, вы ужаснетесь, насколько там все непонятно! Поэтому, если вы с любовью относитесь к себе и своим коллегам, не пренебрегайте правилами и договоренностями. Они значительно упрощают вашу жизнь. Подробнее про имена переменных тут
http://pythonlearn.ru/python-dlya-nachinayushhix/imena-dlya-peremennyx-v-python/
"""

import keyword

keyword.kwlist

"""Итак, у нас есть 500 кроссовок фирмы найк. Но ведь есть же и другие бренды, правильно? Пускай у нас ещё будут кроссовки adidas в количестве 400 штук. """

adidas = 400

"""Теперь применим математические операции, которые мы изучили на наших переменных

1) Мы можем посчитать общее количество кроссовок, которое у нас есть

2) Мы можем посчитать выручку, которую мы поулучим, реализовав наш товар по стоимости 5 тысяч и 4 тысячи рублей за пару

3) Мы можем узнать сколько мы получим прибыли после уплаты налога, который пусть будет 13%
"""

# count
# income
# pure_income

nikes = 450
adidas = 400
count = adidas + nikes


print('Количество:', count, 'Прибыль:', income, 'Чистая прибыль:', pure_income)

nike = 450
adidas = 400

"""Итак, мы аучились создавать переменные и работать с ними! Давайте сделаем так, чтобы можно было вводить данные в программу с клавиатуры. Для этого у нас есть функция `input()` 


"""

b = input('так работает функция input: ') #input - функция для ввоода, так же как print() для вывода
print(b)

b*5 # что-то пошло не так

"""У данных есть не только значения, но и типы. Мы работали пока только со строками и числами, но типов данных гораздо больше. Компьютер не может интуитивно понять, что мы от него хотим в отличие от человека. Поэтому важно следить за типами данных, которые мы предоставляем нашей программе. Числа и строки это разные типы данных и работаем мы с ними по-разному."""

type(b)

type(5)

'5' == 5 # == - это знак "равно". Один = обозначает присваивание переменной, поэтому чтобы проверять равенство используется ==

"""Чтобы превратить строку в число, мы можем использовать особую функцию int() в которую мы передадим строку, а на выходе получим число. Передадим означает, что мы поместим эту строку внутрь скобок."""

b = input('функция input для целых чисел: ') #input - функция для ввоода, так же как print() для вывода
b = int(b)
print(b * 5)

"""Для чисел с плавающей точкой используется тип данных `float`"""

c = float(input('Type float value: '))
c*5

"""### Адрес переменной
Для того, чтобы посмотреть на объект с каким идентификатором ссылается данная переменная, можно использовать функцию id().
"""

a = 4
b = 5
print('id a равен ', id(a))
print('id b равен ', id(b))

x = 4
y = 4
print('id x равен ', id(x))
print('id y равен ', id(y))

a = b
print(id(a))

"""### Операторы в Python:
* Арифметические операторы
* Операторы сравнения (реляционные)
* Операторы присваивания
* Побитовые операторы
* Логические операторы
* Операторы членства (Membership operators)
* Операторы тождественности (Identity operators)


Подробнее тут http://pythonicway.com/python-operators
"""

#Арифметические операторы:

print(4+4) #Суммирует значения слева и справа от оператора
print(4-1) #Вычитание - Вычитает правый операнд из левого
print(4*2) #Умножение - Перемножает операнды
print(4/2) #Деление - Делит левый операнд на правый
print(5%2) #Деление по модулю - Делит левый операнд на правый и возвращает остаток.
print(15//2) # 	Целочисленное деление - Деление в котором возвращается только целая часть результата. Часть после запятой отбрасывается.
print(4**2) #возведение в степень

16**0.5

#Операторы сравнения в Python:

print(4 == 5) #Проверяет равны ли оба операнда. Если да, то условие становится истинным.
print(4 != 5) #Проверяет равны ли оба операнда. Если нет, то условие становится истинным.
print(4 > 5) #Проверяет больше ли значение левого операнда, чем значение правого. Если да, то условие становится истинным.
print(4 < 5) #Проверяет меньше ли значение левого операнда, чем значение правого. Если да, то условие становится истинным.
print(4 >= 5) #Проверяет больше или равно значение левого операнда, чем значение правого. Если да, то условие становится истинным.
print(4 <= 6) #Проверяет меньше или равно значение левого операнда, чем значение правого. Если да, то условие становится истинным.

# print(5 + '5')
print(5+5)
print('5'+'4')

print(5 * '5')

"""### Условия в программе

Условия в Python 
Для того, чтобы программа работала в зависимости от наших условий, мы прибегаем к ключевым словам  `if` и `else`

После слова `if` указывается проверяемое условие завершающееся двоеточием. 

После этого идет блок инструкций, который будет выполнен, если условие истинно. Блок `else` необязателен, он сработает если `if` ложно

Итак, условная инструкция в Питоне имеет следующий синтаксис:

```
if Условие:
    Блок инструкций 1
else:
    Блок инструкций 2
```
"""

if nikes == 500:
  print('Yes')

else:
  print('No')

if 0>0:
  print('hello')

x = (9*8)**(1/3) 

if x > 5:
  print('Истина')

else:
  print('Ложь')

#переменная с вводом данных данных с клавиатуры
#переменная должна иметь тип float
#

#программа если переменная больше 0 то оставляем её значение
#если меньше 0, то берем модуль
#выведем результат на экран

a = float(input('Введите float:'))
if a < 0:
 a = a*(-1) 
 print(a)

else: 
  print(a)

"""Опять немного математики...

Выведите на экран слово **Истина**, если кубический корень из произведения 9 и 8 больше 4 и **Ложь** если это не так

Напишем программу для получения модуля числа, при вводе числа с клавиатуры

Помним о:
1) Функция input - наш друг
2) Тип данных (float, int)

Давайте напишем программу, которая делает модуль из числа x, а если число положительное и четное, то еще домножает его на 2

Напишите программу, которая принимает на вход строку и целое число и выводит на экран эту строку, её длину и её длину в степени введённого целого числа. При введении, например, строки "привет" и числа 2 на экране должно быть выведено "привет 6 36". Названия переменных string и power. Для теста используйте значения string = 'Привет!', power = 5
"""

# string = input('Введите текст: ')

# power = int(input('Введите степень: ')) # так было в задании!

"""### Спасибо за внимание! Буду рад ответить на ваши вопросы
ФОРМА ОС:
https://forms.gle/Rx4KeAmokX44mkhV6
    
Полезные обучающие ссылки:

"Python и анализ данных" Уэс Маккинли

"Автоматизация рутинных задач с помощью python" Эл Свейгарт

http://pythontutor.com/visualize.html#mode=edit визуализатор выполнения кода

###  Установка  и настройка Anaconda


https://www.anaconda.com/distribution/

1. Запустите скачанный инсталлятор. В первом появившемся окне необходимо нажать “Next”.
2. Далее следует принять лицензионное соглашение.
3. Выберете одну из опций установки:

    * Just Me – только для пользователя, запустившего установку;
    * All Users – для всех пользователей. (для тех, кто планирует выйти за пределы анализа данных)
    
4. Укажите путь, по которому будет установлена Anaconda.
5. Укажите дополнительные опции:

    * Add Anaconda to the system PATH environment variable – добавить Anaconda в системную переменную PATH
    * Register Anaconda as the system Python 3.5 – использовать Anaconda, как интерпретатор Python 3.5 по умолчанию.

6. Для начала установки нажмите на кнопку “Install”
7. После установки программы запустите Jupyter Notebook  (наберите его в поиске)
8. В результате запустится веб-сервер и среда разработки в браузере.
9. Создайте ноутбук для разработки, для этого нажмите на кнопку New (в правом углу окна) и в появившемся списке выберете Python.
"""